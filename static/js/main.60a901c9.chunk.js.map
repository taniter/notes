{"version":3,"sources":["DatabaseConnection/Firebase.js","DatabaseConnection/Input.js","DatabaseConnection/InputName.js","DatabaseConnection/Item_Notes.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","DBnotes","database","ref","Input","onChange","event","value","target","name","setState","state","props","onChangeInput","onSendClick","className","this","placoehlder","onClick","Component","InputName","ev","onNameInput","onSaveNameClick","Item_Notes","onDeleteClick","key","val","date","content","App","Date","temp","toLocaleDateString","time","toLocaleTimeString","push","render_data","notes","lst","splice","forEach","item","map","i","child","remove","render_main","stt","localStorage","setItem","render_name_input","getItem","on","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60a901c9.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyClUmZwYb2qXIoUmH9Mb_h3cG_mlp240Es\",\r\n    authDomain: \"contactproject-417ba.firebaseapp.com\",\r\n    databaseURL: \"https://contactproject-417ba.firebaseio.com\",\r\n    projectId: \"contactproject-417ba\",\r\n    storageBucket: \"contactproject-417ba.appspot.com\",\r\n    messagingSenderId: \"553025843254\",\r\n    appId: \"1:553025843254:web:86c7a60522e8d702092897\",\r\n    measurementId: \"G-RDSG39EEXS\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export const DBnotes = firebase.database().ref(\"/notes\");","import React, { Component } from 'react';\r\n\r\nclass Input extends Component {\r\n\r\n    onChange = (event) => {\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        this.setState({\r\n            [name]: value\r\n        }, () => {\r\n            if (this.state)\r\n                this.props.onChangeInput(this.state)\r\n        });\r\n\r\n    }\r\n    onSendClick = () => {\r\n        this.props.onSendClick();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"form-group mt-2 d-flex text-input\">\r\n                <input onChange={this.onChange} className=\"form-control\" name=\"content\" placoehlder=\"text...\" />\r\n                <i onClick={this.onSendClick} className=\"fa btn btn-primary fa-paper-plane\"></i>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\n\r\nclass InputName extends Component {\r\n    onChange = (ev) => {\r\n        const name = ev.target.name;\r\n        const value = ev.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        }, () => {\r\n            this.props.onNameInput(this.state);\r\n        });\r\n    }\r\n    onClick = () => {\r\n        this.props.onSaveNameClick();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"form-group mt-5 text-input\">\r\n                <div>Input Name:</div>\r\n                <input onChange={this.onChange} className=\"form-control\" name=\"content\" placoehlder=\"text...\" />\r\n                <i onClick={this.onClick} className=\"btn btn-primary\">Save</i>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputName;","import React, { Component } from 'react';\r\n\r\nclass Item_Notes extends Component {\r\n    onDeleteClick = () => {\r\n        this.props.onDeleteClick(this.props.value.key);\r\n    }\r\n    render() {\r\n        const value = this.props.value.val();\r\n        return (\r\n            <div className=\"note m-1 d-flex p-2 bg-white\">\r\n                <h6 className=\"time\">{value.date}</h6>\r\n                <h6 className=\"ml-3 content\">{value.content}</h6>\r\n                <div onClick={this.onDeleteClick} className=\"fa fa-times-circle text-danger delete\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item_Notes;","import React, { Component } from 'react';\nimport './App.css'\nimport { DBnotes } from './DatabaseConnection/Firebase'\nimport Input from './DatabaseConnection/Input';\nimport InputName from './DatabaseConnection/InputName';\nimport Item_Notes from './DatabaseConnection/Item_Notes';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stt: 0\n    }\n  }\n  componentWillMount() {\n    const name = localStorage.getItem(\"notes_name\");\n    if (name) {\n      this.name = name\n      this.setState({\n        stt: 1\n      });\n    }\n    else {\n      this.setState({\n        stt: 0\n      });\n    }\n    DBnotes.on(\"value\", (value) => {\n      if (value.val())\n        this.setState({\n          notes: value\n        });\n    })\n  }\n  onChangeInput = (content) => {\n    this.setState({\n      content: content\n    });\n  }\n  onSendClick = () => {\n    if (this.state.content) {\n      const date = new Date();\n      const temp = ({\n        content: this.state.content.content,\n        date: date.toLocaleDateString(),\n        time: date.toLocaleTimeString(),\n        name: this.name\n      })\n      DBnotes.push(temp);\n    }\n  }\n  render_data = () => {\n    if (this.state.notes) {\n      const lst = [];\n      lst.splice(0);\n      this.state.notes.forEach(item => {\n        lst.push(item);\n      })\n      return (\n        lst.map((i, key) => {\n          return (\n            <Item_Notes onDeleteClick={this.onDeleteClick} value={i} key={key}></Item_Notes>\n          )\n        })\n      )\n    }\n    else\n      return (null)\n  }\n  onDeleteClick = (key) => {\n    DBnotes.child(key).remove((key)=>{\n    })\n\n  }\n  render_main = () => {\n    if (this.state.stt)\n      return (\n        <div className=\"container\">\n          <div className=\"list_notes\">\n            <div className={this.state.notes ? \"d-none\" : \"loading\"}>\n              <div className=\"spinner-grow text-muted\"></div>\n              <div className=\"spinner-grow text-primary\"></div>\n              <div className=\"spinner-grow text-success\"></div>\n              <div className=\"spinner-grow text-info\"></div>\n              <div className=\"spinner-grow text-warning\"></div>\n              <div className=\"spinner-grow text-danger\"></div>\n              <div className=\"spinner-grow text-secondary\"></div>\n              <div className=\"spinner-grow text-dark\"></div>\n              <div className=\"spinner-grow text-light\"></div>\n            </div>\n            {this.render_data()}\n          </div>\n          <Input\n            onSendClick={this.onSendClick}\n            onChangeInput={this.onChangeInput}\n          ></Input>\n        </div>\n      )\n    else\n      return (null)\n  }\n  onNameInput = (name) => {\n    if (name) {\n      this.setState({\n        name: name\n      });\n    }\n  }\n  onSaveNameClick = () => {\n    if (this.state.name) {\n      localStorage.setItem(\"notes_name\", this.state.name.content);\n      this.setState({ stt: 1 });\n    }\n  }\n  render_name_input = () => {\n    if (!this.state.stt)\n      return (\n        <InputName\n          onSaveNameClick={this.onSaveNameClick}\n          onNameInput={this.onNameInput}\n        ></InputName>\n      )\n    else\n      return (null)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <this.render_main></this.render_main>\n        <this.render_name_input></this.render_name_input>\n      </div >\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}